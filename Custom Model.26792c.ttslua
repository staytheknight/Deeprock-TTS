-- Korlok Tyrant Weed Cave Segment

spawnLocations={
    -- These locations are relative to the spawn point
    korlokHealingLoc = {Vector{-0.55,2.0,-0.95},Vector{1.1,2.0,1.9}},
    korlokSproutLoc = {Vector{0.55,2.0,-0.95},Vector{-1.1,2.0,1.9}},
    korlokHeartLoc = Vector{0.55,2.0,0.95},
    stalagLoc=Vector{-1.1,2.0,0.0},
    explorationTileLoc=Vector{-1.65,2.0,0.95}
}

function onLoad()
    self.createButton(
        {click_function='Reveal', function_owner=self, label='Reveal',
        position={0.0 , 0.2 , 0.3}, rotation={0.0, 0.0, 0.0}, width=500, height=100, font_size=200,
        scale={1.0,1.0,1.0}, color={0.0, 0.0, 0.0, 0.0}, font_color={252.8,245.0,0.0, 255.0},
        tooltip='Flip & Populate Cave Segment'}
    )
end

function Reveal()
    self.flip()
    Wait.time(selfLock, 3)
    local kHeartBag = Global.call("getKHeartBag")
    local kSproutBag = Global.call("getKSproutBag")
    local kHealingBag = Global.call("getKHealingBag")
    local explorationBag = Global.call("getExplorationBag")
    local stalagmiteBag = Global.call("getStalagmiteModelBag")

    local bagEmpty

    -- Heart Placement
    bagEmpty = Global.call('isBagEmpty',kHeartBag)
    -- if the bag is not empty then
    if bagEmpty == false then
        kHeartBag.takeObject({
            position = self.getPosition() + rotatePos(spawnLocations.korlokHeartLoc),
        })
    else
        print('Warning: Unable to spawn Korlok Tyrant Weed Heart, bag is empty')
    end

    -- Sprout Placement
    for i=1, 2 do
        bagEmpty = Global.call('isBagEmpty',kSproutBag)
        -- if the bag is not empty then
        if bagEmpty == false then
            kSproutBag.takeObject({
                position = self.getPosition() + rotatePos(spawnLocations.korlokSproutLoc[i]),
            })
        else
            print('Warning: Unable to spawn Korlok Tyrant Sprout, bag is empty')
        end
    end

    -- Healing Placement
    for i=1, 2 do
        bagEmpty = Global.call('isBagEmpty',kHealingBag)
        -- if the bag is not empty then
        if bagEmpty == false then
            kHealingBag.takeObject({
                position = self.getPosition() + rotatePos(spawnLocations.korlokHealingLoc[i]),
            })
        else
            print('Warning: Unable to spawn Korlok Tyrant Healing Pod, bag is empty')
        end
    end


    stalagmiteBag.takeObject({position = self.getPosition() + rotatePos(spawnLocations.stalagLoc)})

    -- Boolean if it's doing a refinery mission
    refineryMission = false
    -- Checks all objects in the play zone to see if the refinery is in play
    -- if it is in play then set the mission type of refineryMission to true
    local zone = Global.call('getCleanupZone')
    local objectsInZone = zone.getObjects()
    for _, object in ipairs(objectsInZone) do
        if object.getGMNotes() == "refinery" then
            refineryMission = true;
        end
    end

    -- If the current mission is a refinery mission, set the explorationBag
    -- to be the pumpjack bag instead - pumpjacks will be placed instead of exploration tokens
    if refineryMission then
        explorationBag = Global.call('getPumpjackBag')
        -- Pumpjack
        bagEmpty = Global.call('isBagEmpty',explorationBag)
        -- if the bag is not empty then
        if bagEmpty == false then
            position = rotatePos(spawnLocations.explorationTileLoc)
            explorationBag.takeObject({
                position = self.getPosition() + position - Vector{0.0,1.0,0.0},
                rotation = self.getRotation() + Vector{0.0,0.0,0.0},
                callback="afterSpawnLock", callback_owner=Global
            })
        else
            print('Warning: Unable to place pumpjack, the bag is empty')
        end
    else
        -- Exploration Token
        bagEmpty = Global.call('isBagEmpty',explorationBag)
        -- if the bag is not empty then
        if bagEmpty == false then
            position = rotatePos(spawnLocations.explorationTileLoc)
            explorationBag.takeObject({
                position = self.getPosition() + position,
                rotation = self.getRotation() + Vector{0.0,0.0,180.0}
            })
        else
            print('Warning: No more exploration tokens available to be placed in cave segment')
        end
    end
end


function rotatePos(pos)
    local posX,posY,posZ = pos:get()
    local rot = self.getRotation()
    local rotX,rotY,rotZ = rot:get()
    rotatedPos = Vector{math.cos(math.rad(rotY))*posX + math.sin(math.rad(rotY))*posZ,
                  1.1,
                  -math.sin(math.rad(rotY))*posX + math.cos(math.rad(rotY))*posZ}
    return rotatedPos
end

function selfLock()
    self.lock()
end