-- Mini hidden cavern
-- 1 space rig explore token
-- 1 grunt

spawnLocations={
    -- These locations are relative to the spawn point
    explorationTileLoc = Vector{0.0,1.0,0.0},
    gruntLoc = Vector{1.1,1.0,0.0}
}

function onLoad()
    self.createButton(
        {click_function='Reveal', function_owner=self, label='Reveal',
        position={-0.4 , 0.15 , -0.3}, rotation={0.0, 0.0, 0.0}, width=300, height=50, font_size=100,
        scale={1.0,1.0,1.0}, color={0.0, 0.0, 0.0, 0.0}, font_color={252.8,245.0,0.0, 255.0},
        tooltip='Flip & Populate Cave Segment'}
    )
end

function Reveal()
    self.flip()
    Wait.time(selfLock,3)
    self.rotate({0.0,-120.0,180.0})

    local gruntBag = Global.call('getGruntBag')
    if not Global.call('isBagEmpty',gruntBag) then
        gruntBag.takeObject({position = self.getPosition() + rotatePos(spawnLocations.gruntLoc)})
    else
        print('Warning: Unable to spawn Grunt, bag empty')
    end

    local miniExploreTokenBag = Global.call('getMiniExploreTokenBag')
    if not Global.call('isBagEmpty',miniExploreTokenBag) then
        miniExploreTokenBag.takeObject({
            position = self.getPosition() + rotatePos(spawnLocations.explorationTileLoc),
            rotation = self.getRotation() + Vector{0.0,0.0,180.0}
        })
    else
        print('Warning: Unable to setup space rig explore token, bag is empty')
    end
end

function rotatePos(pos)
    local posX,posY,posZ = pos:get()
    local rot = self.getRotation()
    local rotX,rotY,rotZ = rot:get()
    rotatedPos = Vector{math.cos(math.rad(rotY))*posX + math.sin(math.rad(rotY))*posZ,
                  1.1,
                  -math.sin(math.rad(rotY))*posX + math.cos(math.rad(rotY))*posZ}
    return rotatedPos
end

function selfLock()
    self.lock()
end