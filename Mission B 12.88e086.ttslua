missionB12Positions = {
    hiddenCaveLoc1 = {{5.50, 1.10, -5.51},{4.40, 1.10, -5.51},{4.95, 1.10, -4.56}},
    hiddenCaveRot1 = {{0.03, 300.00, 0.09},{359.91, 59.88, 359.99},{0.06, 180.15, 359.93}},
    stalagmites = {{-3.85, 2.24, -2.66},{1.10, 2.24, -1.71}},
    cryoBulbs = {{-2.20, 2.24, 2.10},{2.75, 2.24, 1.15}},
    grunts = {{1.65, 2.24, -0.75},{-3.85, 2.24, 3.06},{0.00, 2.24, 4.01},
    {-0.55, 2.24, 1.15},{3.30, 2.24, 2.10}},
    rammers = {{-2.20, 2.24, 4.01}},
    explorationTiles = {{-3.30, 2.24, -3.61},{-5.50, 2.24, -3.61},{-3.30, 2.24, 2.10},
    {-0.55, 2.24, 3.06},{2.20, 2.24, 2.10},{2.20, 2.24, -1.70},{0.55, 2.24, -2.66}},
    minerals = {{-4.95, 1.19, -4.56},{-6.60, 1.19, -1.71},{-5.50, 1.19, 0.20},
    {-4.95, 1.20, 3.06},{-2.75, 1.20, 4.96},{0.55, 1.21, 4.96},{3.85, 1.21, 3.06},
    {3.85, 1.21, 1.15},{4.95, 1.21, -0.75},{4.95, 1.21, -0.75}}
}

function setupMissionB12()
    print("Launching Mission 12: A Song of Snow and Ice\nGood Luck Miners!\n")

    local caveBag = Global.call('getCaveBag')
    local biomeCaveBag = Global.call('getBiomeCaveBag')

    params={
        bag = caveBag,
        ID = Global.call('getDropPodGUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {0.00, 1.22, -5.51},
            rotation = {0.03, 300.00, 180.09},
            guid = Global.call('getDropPodGUID'),
            -- Lock tiles afer spawn
            --callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup Drop Pod, object is not in cave bag')
    end

    params={
        bag = biomeCaveBag,
        ID = Global.call('getIceSegL_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {-3.85, 1.09, -2.66},
            rotation = {359.97, 120.00, 359.91},
            guid = Global.call('getIceSegL_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end


    params={
        bag = biomeCaveBag,
        ID = Global.call('getIceSegLong_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {-0.55, 1.10, 3.06},
            rotation = {359.93, 90.00, 359.94},
            guid = Global.call('getIceSegLong_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end


    params={
        bag = biomeCaveBag,
        ID = Global.call('getIceSegMed_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {1.10, 1.10, -1.71},
            rotation = {359.94, 0.02, 0.07},
            guid = Global.call('getIceSegMed_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance1GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-3.30, 1.25, 4.01},
            rotation = {0.0,0.0,0.0},
            guid = Global.call('getCaveEntrance1GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 1, it is not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance2GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {2.20, 1.26, 4.01},
            rotation = {0.0,0.0,0.0},
            guid = Global.call('getCaveEntrance2GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 2, it is not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit3GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {0.55, 1.25, -0.75},
            rotation = {0.07, 180.00, 359.95},
            guid = Global.call('getHexPit3GUID'), -- 5 Hex Pit
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit4GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-2.75, 1.25, 1.15},
            rotation = {0.11, 240.03, 0.02},
            guid = Global.call('getHexPit4GUID'), -- 5 Hex Pit
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end

    local hiddenCaveBag = Global.call('getHiddenCaveBag') -- need to call global function to get proper object ID
    hiddenCaveBag.shuffle()

    params = {floor = 0.1, ceiling = 0.4,}
    randomIndex = Global.call('randInt',params)

    if not Global.call('isBagEmpty',hiddenCaveBag) then
        hiddenCaveBag.takeObject({
            position = missionB12Positions.hiddenCaveLoc1[randomIndex],
            rotation = missionB12Positions.hiddenCaveRot1[randomIndex]
        })
    else
        print("Warning: Unable to setup hidden cave segment, bag is empty")
    end

    local cryoBulbBag = Global.call('getCryoBulbBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',cryoBulbBag) then
            cryoBulbBag.takeObject({
                position = missionB12Positions.cryoBulbs[i]
            })
        else
            print("Warning: Unable to set up geysers, the geyser bag is empty")
        end
    end

    local stalagmiteModelBag = Global.call('getStalagmiteModelBag')
    -- Placing Stalagmites
    for i=1, 2 do
        stalagmiteModelBag.takeObject({
            position = missionB12Positions.stalagmites[i],
            -- rotation = -- ADD RANDOM
        })
    end


    -- Placing Grunts
    local gruntBag = Global.call('getGruntBag')
    for i=1, 5 do
        if not Global.call('isBagEmpty',gruntBag) then
            gruntBag.takeObject({
                position = missionB12Positions.grunts[i],
            })
        else
            print("Warning: Unable to setup grunts, the grunt bag is empty")
        end
    end

    local rammersBag = Global.call('getRammersBag')
    if not Global.call('isBagEmpty',rammersBag) then
        rammersBag.takeObject({
            position = missionB12Positions.rammers[1],
        })
    else
        print("Warning: Unable to setup rammer, the rammers bag is empty")
    end

    local explorationBag = Global.call('getExplorationBag')

    local lootBugBag = Global.call('getLootBugBag')
    for i=1, 3 do
        if not Global.call('isBagEmpty',lootBugBag) then
            explorationBag.putObject(lootBugBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, loot bug bag is empty")
        end
    end

    local redSugarBag = Global.call('getRedSugarBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',redSugarBag) then
            explorationBag.putObject(redSugarBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, red sugar bag is empty")
        end
    end

    local barleyBulbBag = Global.call('getBarleyBulbBag')
    for i=1, 3 do
        if not Global.call('isBagEmpty',barleyBulbBag) then
            explorationBag.putObject(barleyBulbBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, barley bulb bag is empty")
            break
        end
    end

    explorationBag.shuffle()
    for i=1, 7 do
        if not Global.call('isBagEmpty',explorationBag) then
            explorationBag.takeObject({
                position = missionB12Positions.explorationTiles[i],
                rotation = {0.0, 0.0, 180.0}
            })
        else
            print("Warning: Unable to setup exploration tokens, the bag is empty")
            break
        end
    end

    -- Generating Mineral Bag
    local mineralBag = Global.call('getMineralBag')

    local goldBag = Global.call('getGoldBag')
    for i=1, 1 do
        if not Global.call('isBagEmpty',goldBag) then
            mineralBag.putObject(goldBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the gold bag is empty")
        end
    end

    local nitraBag = Global.call('getNitraBag')
    for i=1, 3 do
        if not Global.call('isBagEmpty',nitraBag) then
            mineralBag.putObject(nitraBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the nitra bag is empty")
            break
        end
    end

    local aquardBag = Global.call('getAquardBag')
    for i=1, 5 do
        if not Global.call('isBagEmpty',aquardBag) then
            mineralBag.putObject(aquardBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the aquard bag is empty")
            break
        end
    end

    -- Shuffling Minerals
    mineralBag.shuffle()

    -- Placing Minerals
    for i=1, 9 do
        if not Global.call('isBagEmpty',mineralBag) then
            mineralBag.takeObject({
                position = missionB12Positions.minerals[i]
            })
        else
            print("Warning: Unable to set up minerals, the bag is empty")
        end
    end

    local missionBookB1 = Global.call('getMissionBookB1')
    missionBookB1.setScale({2.0,1.0,2.0})
    missionBookB1.setPosition({-53.52, 0.97, -35.66})
    missionBookB1.Book.setPage(37)
    local missionBookB2 = Global.call('getMissionBookB2')
    missionBookB2.setScale({2.0,1.0,2.0})
    missionBookB2.setPosition({-47.86, 0.97, -35.63})
    missionBookB2.Book.setPage(38)
end