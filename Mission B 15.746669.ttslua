missionB15Positions = {
    hiddenCaveLoc1 = {{-3.85, 1.09, -0.75},{-2.75, 1.10, -0.75},{-3.30, 1.09, -1.70}},
    hiddenCaveRot1 = {{359.97, 120.00, 359.91},{0.09, 240.00, 0.01},{359.94, 0.20, 0.07}},
    hiddenCaveLoc2 = {{-4.95, 1.09, -4.56},{-3.85, 1.09, -4.56},{-4.40, 1.09, -5.51}},
    hiddenCaveRot2 = {{359.97, 120.00, 359.91},{0.09, 240.01, 0.01},{359.94, 0.08, 0.07}},
    stalagmites = {{0.00, 2.25, 4.01},{3.30, 2.25, -5.52}},
    cryoBulbs = {{1.65, 2.25, -4.56},{4.40,2.25, 0.20},{4.40, 2.25, -1.70}},
    broodNexus = {{-6.60, 2.25, 4.01}},
    mactera = {{1.65,2.25, -6.47}},
    slashers = {{5.50, 2.25, 0.20}},
    webspitters = {{5.50, 2.25, 4.01},{6.05, 2.25, 3.06}},
    explorationTiles = {{2.20, 2.25, -5.51},{3.85, 2.25, -4.56},{4.95, 2.25, -0.75},
    {2.75, 2.25, -0.75},{-0.55, 2.25, 3.06},{-3.30, 2.25, 4.01},{-6.05, 2.25, 3.06}},
    minerals = {{0.00, 1.19, -5.52},{6.60, 1.21, 4.01},{-1.10, 1.20, -1.71},
    {-1.10, 1.20, 0.20},{-5.50, 1.19, -1.71},{-6.05, 1.19, -2.66}},
}

function setupMissionB15()
    print("Launching Mission 15: Cold Caves & Creepy Critters\nGood Luck Miners!\n")

    local caveBag = Global.call('getCaveBag')
    local biomeCaveBag = Global.call('getBiomeCaveBag')

    params={
        bag = caveBag,
        ID = Global.call('getDropPodGUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {5.51, 1.23, -5.51},
            rotation = {359.91, 60.41, 179.99},
            guid = Global.call('getDropPodGUID'),
            -- Lock tiles afer spawn
            --callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup Drop Pod, object is not in cave bag')
    end


    params={
        bag = biomeCaveBag,
        ID = Global.call('getIceSegL_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {4.40, 1.11, 0.20},
            rotation = {359.97, 120.00, 359.92},
            guid = Global.call('getIceSegL_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end


    params={
        bag = biomeCaveBag,
        ID = Global.call('getIceSegLong_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {-3.30, 1.10, 4.01},
            rotation = {359.93, 90.00, 359.94},
            guid = Global.call('getIceSegLong_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end


    params={
        bag = biomeCaveBag,
        ID = Global.call('getIceSegMed_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {2.75, 1.10, -4.56},
            rotation = {359.94, 359.99, 0.07},
            guid = Global.call('getIceSegMed_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance1GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {1.65, 1.25, -2.66},
            rotation = {0.0,0.0,0.0},
            guid = Global.call('getCaveEntrance1GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 1, it is not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance2GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {3.85, 1.26, 3.06},
            rotation = {0.0,0.0,0.0},
            guid = Global.call('getCaveEntrance2GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 2, it is not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit2GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {0.00, 1.25, 2.11},
            rotation = {359.97, 299.90, 0.09},
            guid = Global.call('getHexPit2GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit3GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {2.20, 1.39, -3.61},
            rotation = {0.06, 240.00, 179.98},
            guid = Global.call('getHexPit3GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit5GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-3.85, 1.39, 3.06},
            rotation = {0.03, 299.99, 180.10},
            guid = Global.call('getHexPit5GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end


    local hiddenCaveBag = Global.call('getHiddenCaveBag') -- need to call global function to get proper object ID
    hiddenCaveBag.shuffle()

    params = {floor = 0.1, ceiling = 0.4,}
    randomIndex = Global.call('randInt',params)

    if not Global.call('isBagEmpty',hiddenCaveBag) then
        hiddenCaveBag.takeObject({
            position = missionB15Positions.hiddenCaveLoc1[randomIndex],
            rotation = missionB15Positions.hiddenCaveRot1[randomIndex]
        })
    else
        print("Warning: Unable to setup hidden cave segment, bag is empty")
    end

    params = {floor = 0.1, ceiling = 0.4,}
    randomIndex = Global.call('randInt',params)

    if not Global.call('isBagEmpty',hiddenCaveBag) then
        hiddenCaveBag.takeObject({
            position = missionB15Positions.hiddenCaveLoc2[randomIndex],
            rotation = missionB15Positions.hiddenCaveRot2[randomIndex]
        })
    else
        print("Warning: Unable to setup hidden cave segment, bag is empty")
    end

    local stalagmiteModelBag = Global.call('getStalagmiteModelBag')
    -- Placing Stalagmites
    for i=1, 2 do
        stalagmiteModelBag.takeObject({
            position = missionB15Positions.stalagmites[i],
            -- rotation = -- ADD RANDOM
        })
    end

    local cryoBulbBag = Global.call('getCryoBulbBag')
    for i=1, 3 do
        if not Global.call('isBagEmpty',cryoBulbBag) then
            cryoBulbBag.takeObject({
                position = missionB15Positions.cryoBulbs[i]
            })
        else
            print("Warning: Unable to set up geysers, the geyser bag is empty")
        end
    end

    local broodNexusBag = Global.call('getbroodNexusBag')
    if not Global.call('isBagEmpty',broodNexusBag) then
        broodNexusBag.takeObject({
            position = missionB15Positions.broodNexus[1]
        })
    else
        print("Warning: Unable to setup brood nexus, the bag is empty")
    end

    local slasherBag = Global.call('getSlasherBag')
    if not Global.call('isBagEmpty',slasherBag) then
        slasherBag.takeObject({
            position = missionB15Positions.slashers[1]
        })
    else
        print("Warning: Unable to setup slasher, the bag is empty")
    end

    local macteraBag = Global.call('getSlasherBag')
    if not Global.call('isBagEmpty',macteraBag) then
        macteraBag.takeObject({
            position = missionB15Positions.mactera[1]
        })
    else
        print("Warning: Unable to setup mactera, the bag is empty")
    end

    local webspitterBag = Global.call('getWebSpitterBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',webspitterBag) then
            webspitterBag.takeObject({
                position = missionB15Positions.webspitters[i]
            })
        else
            print("Warning: Unable to setup webspitter, the bag is empty")
        end
    end

    local explorationBag = Global.call('getExplorationBag')

    local lootBugBag = Global.call('getLootBugBag')
    for i=1, 1 do
        if not Global.call('isBagEmpty',lootBugBag) then
            explorationBag.putObject(lootBugBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, loot bug bag is empty")
        end
    end

    local redSugarBag = Global.call('getRedSugarBag')
    for i=1, 1 do
        if not Global.call('isBagEmpty',redSugarBag) then
            explorationBag.putObject(redSugarBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, red sugar bag is empty")
        end
    end

    local barleyBulbBag = Global.call('getBarleyBulbBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',barleyBulbBag) then
            explorationBag.putObject(barleyBulbBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, barley bulb bag is empty")
            break
        end
    end

    local eggBag = Global.call('getEggBag')
    for i=1, 5 do
        if not Global.call('isBagEmpty',eggBag) then
            explorationBag.putObject(eggBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, egg bag is empty")
            break
        end
    end

    -- Shuffling Exploration Tiles
    explorationBag.shuffle()

    -- Placing Exploration Tiles
    -- Originally places 7, some kept in bag for hidden cave code to work
    for i=1, 7 do
        if not Global.call('isBagEmpty',explorationBag) then
            explorationBag.takeObject({
                position = missionB15Positions.explorationTiles[i],
                rotation = {0.0, 0.0, 180.0}
            })
        else
            print("Warning: Unable to setup exploration tokens, the bag is empty")
            break
        end
    end

    -- Generating Mineral Bag
    local mineralBag = Global.call('getMineralBag')

    local goldBag = Global.call('getGoldBag')
    for i=1, 3 do
        if not Global.call('isBagEmpty',goldBag) then
            mineralBag.putObject(goldBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the gold bag is empty")
        end
    end

    local nitraBag = Global.call('getNitraBag')
    for i=1, 3 do
        if not Global.call('isBagEmpty',nitraBag) then
            mineralBag.putObject(nitraBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the nitra bag is empty")
            break
        end
    end

    -- Shuffling Minerals
    mineralBag.shuffle()

    -- Placing Minerals
    for i=1, 6 do
        if not Global.call('isBagEmpty',mineralBag) then
            mineralBag.takeObject({
                position = missionB15Positions.minerals[i]
            })
        else
            print("Warning: Unable to set up minerals, the bag is empty")
        end
    end

    local missionBookB1 = Global.call('getMissionBookB1')
    missionBookB1.setScale({2.0,1.0,2.0})
    missionBookB1.setPosition({-53.52, 0.97, -35.66})
    missionBookB1.Book.setPage(43)
    local missionBookB2 = Global.call('getMissionBookB2')
    missionBookB2.setScale({2.0,1.0,2.0})
    missionBookB2.setPosition({-47.86, 0.97, -35.63})
    missionBookB2.Book.setPage(44)
end