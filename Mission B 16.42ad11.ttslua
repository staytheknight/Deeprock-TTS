missionB16Positions = {
    hiddenCaveLoc1 = {{-5.50, 1.09, -5.51},{-4.40, 1.09, -5.51},{-4.95, 1.09, -6.47}},
    hiddenCaveRot1 = {{359.97, 120.00, 359.91},{0.09, 239.97, 0.01},{359.94, 0.01, 0.07}},
    hiddenCaveLoc2 = {{-1.10, 1.09, -5.51},{-0.55, 1.09, -6.47},{-1.65, 1.09, -6.47}},
    hiddenCaveRot2 = {{0.06, 180.02, 359.93},{0.03, 300.01, 0.09},{359.91, 60.00, 359.99}},
    stalagmites = {{-2.20, 1.25, 0.20},{0.55, 1.25, 3.06}},
    explodingPlants = {{-3.30, 1.24, 0.20},{-1.65, 1.24, 1.15}},
    pSporeFungus = {{-0.55, 1.33, 3.06},{1.65, 1.33, 3.06},{3.30, 1.34, 0.20},{2.75, 1.34, -2.66}},
    grunts = {{-4.95, 1.24, 1.15},{-6.05, 1.24, -0.75},{-4.40, 1.25, 0.20},{-4.40, 1.24, -1.71}
    ,{-2.20, 1.25, -1.71}},
    nHatchlings = {{1.65, 1.26, 4.96},{4.40, 1.26, 4.01}},
    nBreeder = {{3.85, 1.26, 3.06}},
    explorationTiles = {{-3.30, 1.36, -1.71},{-3.85, 1.36, 1.15},{-1.65, 1.37, 4.96},
    {1.10, 1.37, 4.01},{1.10, 1.37, -1.71},{3.85, 1.37, -2.66}},
    minerals = {{-5.50, 1.20, 2.10},{-6.60, 1.19, 0.20},{-6.60, 1.19, -3.61},
    {-1.10, 1.20, 0.20},{1.65, 1.20, -6.47},{3.85, 1.20, -4.56},{5.50, 1.21, 4.01},
    {4.95, 1.21, 4.96}},
}

function setupMissionB16()
    print("Launching Mission 16: Fungus Sprawl\nGood Luck Miners!\n")

    local caveBag = Global.call('getCaveBag')
    local biomeCaveBag = Global.call('getBiomeCaveBag')

    params={
        bag = caveBag,
        ID = Global.call('getDropPodGUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-3.30, 1.23, 4.01},
            rotation = {359.97, 120.03, 179.91},
            guid = Global.call('getDropPodGUID'),
            -- Lock tiles afer spawn
            --callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup Drop Pod, object is not in cave bag')
    end

    params={
        bag = biomeCaveBag,
        ID = Global.call('getBogSegSeq_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {-3.85, 1.25, -0.75},
            rotation = {359.91, 30.00, 180.03},
            guid = Global.call('getBogSegSeq_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end

    params={
        bag = biomeCaveBag,
        ID = Global.call('getBogSegLong_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {1.10, 1.26, 4.01},
            rotation = {0.07, 270.00, 180.07},
            guid = Global.call('getBogSegLong_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end

    params={
        bag = biomeCaveBag,
        ID = Global.call('getBogSegBig_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {2.74, 1.10, -0.75},
            rotation = {0.03, 300.00, 0.09},
            guid = Global.call('getBogSegBig_GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the biome cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit3GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-3.30, 1.40, 2.11},
            rotation = {0.13, 239.96, 179.99},
            guid = Global.call('getHexPit3GUID'), -- 5 Hex Pit
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit4GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {2.20, 1.26, 4.01},
            rotation = {359.96, 119.99, 359.93},
            guid = Global.call('getHexPit4GUID'), -- 5 Hex Pit
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end

    params={
        bag = biomeCaveBag,
        ID = Global.call('getDreadCocoonHex_GUID'),
    }
    if Global.call('isInBag',params) then
        biomeCaveBag.takeObject({
            position = {4.95, 1.41, -0.75},
            rotation = {0.04, 299.99, 180.09},
            guid = Global.call('getDreadCocoonHex_GUID'),
        })
    else
        print('Warning: Unable to setup dreadnought cocoon, it is not in the biome cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance1GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {2.75, 1.39, 4.96},
            rotation = {0.0,0.0,0.0},
            guid = Global.call('getCaveEntrance1GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 1, it is not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance2GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-3.85, 1.25, -0.75},
            rotation = {0.0,0.0,0.0},
            guid = Global.call('getCaveEntrance2GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 2, it is not in the cave bag')
    end

    local hiddenCaveBag = Global.call('getHiddenCaveBag') -- need to call global function to get proper object ID
    hiddenCaveBag.shuffle()

    params = {floor = 0.1, ceiling = 0.4,}
    randomIndex = Global.call('randInt',params)

    if not Global.call('isBagEmpty',hiddenCaveBag) then
        hiddenCaveBag.takeObject({
            position = missionB16Positions.hiddenCaveLoc1[randomIndex],
            rotation = missionB16Positions.hiddenCaveRot1[randomIndex]
        })
    else
        print("Warning: Unable to setup hidden cave segment, bag is empty")
    end

    params = {floor = 0.1, ceiling = 0.4,}
    randomIndex = Global.call('randInt',params)

    if not Global.call('isBagEmpty',hiddenCaveBag) then
        hiddenCaveBag.takeObject({
            position = missionB16Positions.hiddenCaveLoc2[randomIndex],
            rotation = missionB16Positions.hiddenCaveRot2[randomIndex]
        })
    else
        print("Warning: Unable to setup hidden cave segment, bag is empty")
    end

    -- Exploding Plants placements
    local explodingPlantBag = Global.call('getExplodingPlantsBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',explodingPlantBag) then
            explodingPlantBag.takeObject({
                position = missionB16Positions.explodingPlants[i]
            })
        else
            print("Warning: Unable to set up exploding plants, the exploding plants bag is empty")
        end
    end

    local poisonSporeBag = Global.call('getPoisonSporeBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',poisonSporeBag) then
            poisonSporeBag.takeObject({
                position = missionB16Positions.pSporeFungus[i]
            })
        else
            print("Warning: Unable to setup glyphid cocoons, the bag is empty")
        end
    end

    local stalagmiteModelBag = Global.call('getStalagmiteModelBag')
    -- Placing Stalagmites
    for i=1, 2 do
        stalagmiteModelBag.takeObject({
            position = missionB16Positions.stalagmites[i],
            -- rotation = -- ADD RANDOM
        })
    end

    local nHatchlingsBag = Global.call('getNaedoHatchlingBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',nHatchlingsBag) then
            nHatchlingsBag.takeObject({
                position = missionB16Positions.nHatchlings[i]
            })
        else
            print("Warning: Unable to setup Naedocyte Hatchling, the bag is empty")
        end
    end

    local nBreeder = Global.call('getNaedoBreederBag')
    if not Global.call('isBagEmpty',nBreeder) then
        nBreeder.takeObject({
            position = missionB16Positions.nBreeder[1]
        })
    else
        print("Warning: Unable to setup Naedocyte Hatchling, the bag is empty")
    end

    local explorationBag = Global.call('getExplorationBag')

    local lootBugBag = Global.call('getLootBugBag')
    for i=1, 2 do
        if not Global.call('isBagEmpty',lootBugBag) then
            explorationBag.putObject(lootBugBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, loot bug bag is empty")
        end
    end

    local redSugarBag = Global.call('getRedSugarBag')
    for i=1, 1 do
        if not Global.call('isBagEmpty',redSugarBag) then
            explorationBag.putObject(redSugarBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, red sugar bag is empty")
        end
    end

    local barleyBulbBag = Global.call('getBarleyBulbBag')
    for i=1, 1 do
        if not Global.call('isBagEmpty',barleyBulbBag) then
            explorationBag.putObject(barleyBulbBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, barley bulb bag is empty")
            break
        end
    end

    local fossilBag = Global.call('getFossilBag')
    for i=1, 4 do
        if not Global.call('isBagEmpty',fossilBag) then
            explorationBag.putObject(fossilBag.takeObject())
        else
            print("Warning: Unable to setup exploration tokens, fossil bag is empty")
            break
        end
    end

    explorationBag.shuffle()
    for i=1, 6 do
        if not Global.call('isBagEmpty',explorationBag) then
            explorationBag.takeObject({
                position = missionB16Positions.explorationTiles[i],
                rotation = {0.0, 0.0, 180.0}
            })
        else
            print("Warning: Unable to setup exploration tokens, the bag is empty")
            break
        end
    end

    -- Generating Mineral Bag
    local mineralBag = Global.call('getMineralBag')

    local goldBag = Global.call('getGoldBag')
    for i=1, 3 do
        if not Global.call('isBagEmpty',goldBag) then
            mineralBag.putObject(goldBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the gold bag is empty")
        end
    end

    local nitraBag = Global.call('getNitraBag')
    for i=1, 5 do
        if not Global.call('isBagEmpty',nitraBag) then
            mineralBag.putObject(nitraBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the nitra bag is empty")
            break
        end
    end

    -- Shuffling Minerals
    mineralBag.shuffle()

    -- Placing Minerals
    for i=1, 8 do
        if not Global.call('isBagEmpty',mineralBag) then
            mineralBag.takeObject({
                position = missionB16Positions.minerals[i]
            })
        else
            print("Warning: Unable to set up minerals, the bag is empty")
        end
    end

    local missionBookB1 = Global.call('getMissionBookB1')
    missionBookB1.setScale({2.0,1.0,2.0})
    missionBookB1.setPosition({-53.52, 0.97, -35.66})
    missionBookB1.Book.setPage(45)
    local missionBookB2 = Global.call('getMissionBookB2')
    missionBookB2.setScale({2.0,1.0,2.0})
    missionBookB2.setPosition({-47.86, 0.97, -35.63})
    missionBookB2.Book.setPage(46)
end
