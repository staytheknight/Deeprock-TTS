mission12Positions = {
    stalagmites = {{2.20, 3.0, 2.10},{2.75, 2.25, -0.75},{-1.65, 2.25, -4.56}},
    grunts = {{-3.30, 1.6, 0.20},{-2.75, 1.6, -0.75}},
    spitballer = {{3.85, 1.6, -2.66}},
    explorationTiles = {{0.00, 2.0, 4.01},
    {-3.85, 2.0, -0.75},{-3.30, 2.0, -3.61},{-0.55, 2.0, -4.56},
    {2.20, 2.0, -1.71},{2.20, 2.0, -5.51}},
    -- some kept in bag for hidden cave code to work
    --{-3.85, 2.0, 3.69},{4.95, 2.0, 3.69},
    minerals = {{-6.05, 2.0, 4.96},{-6.05, 2.0, 3.06},{-5.50, 2.0, 2.11},
    {-1.65, 2.0, 4.96},{2.75, 2.0, 4.96},{6.05, 2.0, 1.15},
    {4.95, 2.0, -0.75},{6.05, 2.0, -4.56},{5.50, 2.0, -5.52},
    {4.95, 2.0, -6.47},{0.00, 2.0, -5.52},{-4.40, 2.0, -1.71}},
    hiddenCaveLoc1 = {{-3.30, 1.08, 4.01},{-3.85, 1.08, 3.06},{-4.40, 1.08, 4.01}},
    hiddenCaveRot1 = {{0.00, 240.0, 0.00},{0.00, 0.00, 0.00},{0.00, 120.0, 0.00}},
    hiddenCaveLoc2 = {{4.40, 1.08, 4.01},{5.50, 1.08, 4.01},{4.95, 1.08, 3.06}},
    hiddenCaveRot2 = {{0.00, 120.0, 0.00},{0.00, 240.00, 0.00},{0.00, 0.00, 0.00}}
}

function setupMission12()
    print("Launching Mission 12: The Dark Caves\nGood Luck Miners!\n")

    local caveBag = Global.call('getCaveBag') -- need to call global function to get proper object ID

    params={
        bag = caveBag,
        ID = Global.call('getDropPodGUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-4.40, 1.23, -5.51},
            rotation = {0.00, 120.0, 180.00},
            guid = Global.call('getDropPodGUID'),
            -- Lock tiles afer spawn
            --callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup Drop Pod, object is not in cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveSeg1GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {1.10, 1.22, 2.10},
            rotation = {0.00, 120.0, 180.00},
            guid = Global.call('getCaveSeg1GUID'), -- (L Segment)
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveSeg2GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {-2.75, 1.25, -2.66},
            rotation = {0.00, 180.00, 180.00},
            guid = Global.call('getCaveSeg2GUID'), -- (Increment Segment)
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveSeg4GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {3.30, 1.26, -3.61},
            rotation = {0.00, 240.01, 180.00},
            guid = Global.call('getCaveSeg4GUID'), -- (Big Segment)
            -- Lock tiles afer spawna
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave, cave tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getHexPit3GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {1.10, 1.20, 0.20},
            rotation = {0.00, 60.0, 0.00},
            guid = Global.call('getHexPit3GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup pits, pit tiles are not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance1GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {1.10, 1.27, 4.01},
            rotation = {0.0, 180.0, 0.0},
            guid = Global.call('getCaveEntrance1GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 1, it is not in the cave bag')
    end

    params={
        bag = caveBag,
        ID = Global.call('getCaveEntrance2GUID'),
    }
    if Global.call('isInBag',params) then
        caveBag.takeObject({
            position = {1.65, 1.29, -6.47},
            rotation = {0.0,180.0,0.0},
            guid = Global.call('getCaveEntrance2GUID'),
            -- Lock tiles afer spawn
            callback="afterSpawnLock", callback_owner=Global
        })
    else
        print('Warning: Unable to setup cave exit 2, it is not in the cave bag')
    end


    -- Hidden cave segments
    local hiddenCaveBag = Global.call('getHiddenCaveBag') -- need to call global function to get proper object ID
    hiddenCaveBag.shuffle()

    math.randomseed(os.time())
    randomIndex = math.random(1,3)

    if not Global.call('isBagEmpty',hiddenCaveBag) then
        hiddenCaveBag.takeObject({
            position = mission12Positions.hiddenCaveLoc1[randomIndex],
            rotation = mission12Positions.hiddenCaveRot1[randomIndex]
        })
    else
        print("Warning: Unable to setup hidden cave segment, bag is empty")
    end

    math.randomseed(os.time())
    randomIndex = math.random(1,3)

    if not Global.call('isBagEmpty',hiddenCaveBag) then
        hiddenCaveBag.takeObject({
            position = mission12Positions.hiddenCaveLoc2[randomIndex],
            rotation = mission12Positions.hiddenCaveRot2[randomIndex]
        })
    else
        print("Warning: Unable to setup hidden cave segment, bag is empty")
    end

    -- need to call global function to get proper object ID
    local stalagmiteModelBag = Global.call('getStalagmiteModelBag')

    for i=1, 3 do
        stalagmiteModelBag.takeObject({
            position = mission12Positions.stalagmites[i],
            -- rotation = -- ADD RANDOM
        })
    end

    local gruntBag = Global.call('getGruntBag')
    local spitballerBag = Global.call('getSpitballerBag')

    for i=1, 2 do
        if not Global.call('isBagEmpty',gruntBag) then
            gruntBag.takeObject({
                position = mission12Positions.grunts[i],
                rotation = {0.00, 165.00, 0.00}
            })
        else
            print("Warning: Unable to setup grunts, the grunt bag is empty")
            break
        end
    end

    if not Global.call('isBagEmpty',spitballerBag) then
        spitballerBag.takeObject({
            position = mission12Positions.spitballer[1],
            rotation =  {0.00, 210.0, 0.00}
        })
    else
        print("Warning: Unable to setup spitball infector, the spitball infector bag is empty")
    end

    -- Exploration Tokens
    local explorationBag = Global.call('getExplorationBag') -- need to call global function to get proper object ID
    local lootBugBag = Global.call('getLootBugBag')
    local starchNutBag = Global.call('getStarchNutBag')
    local redSugarBag = Global.call('getRedSugarBag')
    local fossilBag = Global.call('getFossilBag')

    if not Global.call('isBagEmpty',redSugarBag) then
        explorationBag.putObject(redSugarBag.takeObject())
    else
        print("Warning: Unable to set up exploration tokens, red sugar bag is empty")
    end

    if not Global.call('isBagEmpty',starchNutBag) then
        explorationBag.putObject(starchNutBag.takeObject())
    else
        print("Warning: Unable to set up exploration tokens, starch nut bag is empty")
    end

    for i=1, 2 do
        if not Global.call('isBagEmpty',lootBugBag) then
            explorationBag.putObject(lootBugBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, loot bug bag is empty")
            break
        end
    end

    for i=1, 4 do
        if not Global.call('isBagEmpty',fossilBag) then
            explorationBag.putObject(fossilBag.takeObject())
        else
            print("Warning: Unable to set up exploration tokens, fossil bag is empty")
            break
        end
    end

    -- Shuffling Exploration Tiles
    explorationBag.shuffle()

    -- Placing Exploration Tiles
    -- originally 8, some kept in bag for hidden cave code to work
    for i=1, 6 do
        if not Global.call('isBagEmpty',explorationBag) then
            explorationBag.takeObject({
                position = mission12Positions.explorationTiles[i],
                rotation = {0.0, 210, 180.0}
            })
        else
            print("Warning: Unable to setup exploration tokens, the bag is empty")
            break
        end
    end

    -- Mineral Placement
    local mineralBag = Global.call('getMineralBag')
    local nitraBag = Global.call('getNitraBag')
    local goldBag = Global.call('getGoldBag')
    local aquardBag = Global.call('getAquardBag')


    -- Generating Mineral Bag
    for i=1, 4 do
        if not Global.call('isBagEmpty',nitraBag) then
            mineralBag.putObject(nitraBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the nitra bag is empty")
            break
        end
    end

    for i=1, 2 do
        if not Global.call('isBagEmpty',goldBag) then
            mineralBag.putObject(goldBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the gold bag is empty")
            break
        end
    end

    for i=1, 6 do
        if not Global.call('isBagEmpty',aquardBag) then
            mineralBag.putObject(aquardBag.takeObject())
        else
            print("Warning: Unable to set up minerals, the aquard bag is empty")
            break
        end
    end


    -- Shuffling Minerals
    mineralBag.shuffle()

    -- Placing Minerals
    for i=1, 12 do
        if not Global.call('isBagEmpty',mineralBag) then
            mineralBag.takeObject({
                position = mission12Positions.minerals[i]
            })
        else
            print("Warning: Unable to set up minerals, the bag is empty")
        end
    end

    local missionBook = Global.call('getMissionBook')
    missionBook.Book.setPage(13)

end